%section
	%h1 Benefits and pitfalls of agnostic packages
	%h2 and stuff

	%aside.notes Worked on a few packages myself

%section
	%h2 Who am I?
	%img{:src => 'images/09.jpg'}
	%ul
		%li.fragment Maxime Fabre
		%li.fragment French <em>(hon hon hon baguette)</em>
		%li.fragment 24 years old
		%li.fragment Working at <strong>Madewithlove</strong> since 08/2013

	%aside.notes
		%ul
			%li First of all a quick look never worked with me before
			%li My name is Maxime Fabre, how it's pronounced
			%li I'm french, most important thing
			%li In the middle age thingy
			%li Here since about a year

%section
	%p Also known as "that guy that keeps bothering me about braces"
	%pre
		%code
			:plain
				class foo_BaR
					{ var $FOOBAR = '_nope';
					static protected function _please($sTap)         {
						IF $sTap
							ECHO "this" && 'is'."torture";;
					}
				}
	%img{:src => 'images/nope.jpg'}

	%aside.notes
		%p May also know me PR reviewed, guy incredibly annoying about CS and PSR2 and stuff

%section
	%h1 (Framework) Agnostic packages
	%ol
		%li.fragment Packages that do not believe in one single framework.
		%li.fragment Most packages aren't. I think. I don't have any stats, really.
		%li.fragment Multiple ways to achieve agnosticism (patterns)

	%aside.notes
		%ul
			%li Never heard the term, here comes
			%li Don't know, mostly symfony bundles
			%li Multiple ways, we'll review them

%section
	%p More importantly<br>Agnostic is most of the cases the <strong>right way</strong> to do packages

	%aside.notes There are exceptions. Not thinking outside box

%section
	%h1 Benefits
	%img{:src => 'images/benefits.png'}

	%aside.notes Wonderful image found GI

%section
	%h1 The obvious ones
	%ol
		%li.fragment
			%p Wider audience:
			%span.fragment Carebears
			%span.fragment , Schrodingers
			%span.fragment , The Rest
		%li.fragment Not locked to a framework's release cycle
		%li.fragment "wow much package very agnostic"

	%aside.notes
		%ul
			%li CB you do care for, test on them, can't unit test, major ones
			%li SD don't know, fingers crossed
			%li Rest microframeworks/components etc
			%li Not locked Laravel 4.1/4.2 type hint
			%li brag r/php

%section
	%h1 The totally-not-obvious-but-still-kind-of-nice ones
	%ol
		%li.fragment Intrinsinc respect of the SRP principles
		%li.fragment Better understanding of how the various frameworks work
		%li.fragment Use whatever package you want as foundation
		%li.fragment
			Being a strong independent tax-paying citizen
			%img{src: 'images/independence.jpg'}

	%aside.notes
		%ul
			%li Can't rely on transports or classes
			%li Have to learn how works (sessions etc)
			%li mix match packages
			%li do your own thing

%section
	%h1	Pitfalls
	%img{src: 'images/pitfalls.jpg'}

%section
	%h2 Pitfalls
	%ol
		%li.fragment Thinking it's going to be easy-peasy-lemon-squeezy
		%li.fragment <strike>You do not talk about Figh</strike> You have no idea what the destination environment is
		%li.fragment Thinking too much in terms of "framework" features
		%li.fragment
			Dependencies conflicts. All the time.
			%span.fragment ALL THE FUCKING TIME.

	%aside.notes
		%ul
			%li A lot more time
			%li Sessions etc, classes to bind on
			%li relying on features you think most frameworks have
			%li Dependencies symfony laravel

%section
	%h1 Cool story bro
	%h2 but how?

%section
	%h1 Requirements
	%ol
		%li.fragment
			%span Namespaces
			%span.fragment Symfony\Foundation\How\The\Fuck\Do\People\Even\Remember\All\That
		%li.fragment PSR all the things.
		%li.fragment
			%span Loosely-couple your dependencies<br>
			%code.fragment "illuminate/support": "4.2.0"<br>
			%code.fragment "illuminate/support": "4.2.*|5.0.*"

%section
	%h2 Writing agnostic packages is no different than writing front-end features
	%h3.fragment Graceful degradation
	%h3.fragment Progressive enhancement

%section
	%h1 Graceful degradation
	%p.fragment When an escalator breaks, it's still stairs
	%p.fragment Is when you'd rely on a set of features from the framework, and do your best so your package is usable if the freamwork doesn't have them

%section
	%h2 Example: migrations
	%code.fragment whatevertisan migrate your/package
	%pre.fragment
		%code
			$migrator = new Vendor\Package\Migrator($pdo);
			$migrator->migrate();

%section
	%h2 Progressive enhancement
	%p.fragment Adding an elevator next to a set of stairs
	%p.fragment Building something that works for the ground up, and adding adaptators for the various frameworks

%section
	%h2 Service providers
	%p.fragment Make your package work as is by just creating an instance, then add service providers that hook those services into the framework
	%pre.fragment
		%code
			:plain
				class MyPackageServiceProvider extends ServiceProvider
				{
					public function register()
					{
						$this->package('vendor/package');

						$this->app->singleton('migrate', 'Vendor\Package\MigrateCommand');
						$this->commands('migrate');
					}
				}

%section
	%div.fragment
		%h2 Those can be in the same repository
		%img{:src => 'images/providers.png'}
	%div.fragment
		%h2 Or decicated repositories
		%img{:src => 'images/repositories.png'}

